# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# NOTE: we build the container image first, and then we log in and push the container image;
#       this is intentional, as it still allows us maximum flexibility when building the
#       container image (vs. "buildAndPush") and it also allows us to diagnose image build
#       issues separately from container registry connection or push issues.

trigger:
- dev

pool:
  vmImage: 'ubuntu-24.04' 

variables:
  containerRegistry: acr-morphic
  repository: 'config-editor-webapp'
  tag: '$(Build.BuildNumber)'

resources:
  repositories:
  - repository: deploy-repository
    type: github
    name: raisingthefloor/deploy-config-editor-webapp
    endpoint: 'deploybot-rtf (1)'
    ref: main

stages:
- stage: Docker
  displayName: Build and push Docker image
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and push Docker image
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        containerRegistry: $(containerRegistry)
        dockerfile: './Dockerfile'
        repository: $(repository)
        tags: $(tag)
    - task: Docker@2
      displayName: Log in to container registry
      inputs:
        command: login
        containerRegistry: $(containerRegistry)
    - task: Docker@2
      displayName: Push docker image
      inputs:
        command: push
        containerRegistry: $(containerRegistry)
        repository: $(repository)
        tags: $(tag)
    - task: Docker@2
      displayName: Log out of container registry
      inputs:
        command: logout
        containerRegistry: $(containerRegistry)

- stage: Update
  displayName: Update deployment repository
  jobs:
  - job: UpdateDeploymentRepo
    displayName: Update deployment repository
    steps:
    - checkout: deploy-repository
      displayName: Pull deployment repo
      persistCredentials: true
      path: deploy-config-editor-webapp
    - task: Bash@3
      env:
        TAG: $(tag)
        BRANCH: main
      inputs:
        targetType: 'inline'
        workingDirectory: ./
        script: |
          # if any command returns an error, stop the script
          set -e

          # print all commands to the terminal (for debugging)

          # download the specific version of Kustomize which we have tested
          # docker pull registry.k8s.io/kustomize/kustomize:v5.7.0

          # NOTE: at this point, we should be in the deploy-config-editor-webapp's source directory

          # DEBUG: print out the dev deployment file
          cat config-editor-webapp-dev-deployment.yaml

          # use sed to update our build tag
          sed -i 's|image: morphic.azurecr.io/config-editor-webapp:\S*|image: morphic.azurecr.io/config-editor-webapp:$(TAG)|' config-editor-webapp-dev-deployment.yaml

          # DEBUG: print out the dev deployment file
          cat config-editor-webapp-dev-deployment.yaml

          # update deployment tag
          # docker run registry.k8s.io/kustomize/kustomize:v5.7.0 edit set image morphic.azurecr.io/config-editor-webapp=morphic.azurecr.io/config-editor-webapp:${NEWTAG}

          # DEBUG
          # cat kustomization.yaml

          # docker run registry.k8s.io/kustomize/kustomize:v5.7.0 build
          # rm kustomization.yaml

          # DEBUG: print out directory
          ls -a

          # test Kustomize
          #docker run registry.k8s.io/kustomize/kustomize:v5.7.0 version
